df$Time <- as.factor(df$Time)
df$Group <- as.factor(df$Group)
df$Subject <- as.factor(df$Subject)
# # Convert Gender to numeric: 0 = Male, 1 = Female
# df$Gender <- ifelse(df$Gender == "Male", 0,
#                     ifelse(df$Gender == "Female", 1, NA))
# Ensure Weight is numeric
df$Weight <- as.numeric(df$Weight)
# Run two-way ANOVA with covariates
anova_result <- aov(Value ~ Time * Group + Gender + Weight + Error(Subject), data = df)
# View summary
summary(anova_result)
#
# # Install if needed
# if (!require("emmeans")) install.packages("emmeans")
# library(emmeans)
#
# # Fit simplified model for post hoc tests (no Error structure)
# model_simple <- aov(Value ~ Time * Group + Gender + Weight, data = df)
#
# # Estimated marginal means
# em <- emmeans(model_simple, ~ Time * Group)
#
# # Pairwise comparisons
# pairs(em, adjust = "tukey")
# Post hoc comparisons of Time within each Group
emmeans(model_simple, pairwise ~ Time | Group, adjust = "tukey")
# Load necessary libraries
library(tidyverse)
library(readxl)
# Get script directory or fallback
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Construct file path
file_path <- file.path(script_dir, "8-isoprostane.xlsx")
# Read the Excel file (assumes data is in the first sheet)
df <- read_excel(file_path)
# Convert character columns to appropriate formats
df$Time <- as.factor(df$Time)
df$Group <- as.factor(df$Group)
df$Subject <- as.factor(df$Subject)
# # Convert Gender to numeric: 0 = Male, 1 = Female
# df$Gender <- ifelse(df$Gender == "Male", 0,
#                     ifelse(df$Gender == "Female", 1, NA))
# Ensure Weight is numeric
df$Weight <- as.numeric(df$Weight)
# Run two-way ANOVA with covariates
anova_result <- aov(Value ~ Time * Group + Gender + Weight + Error(Subject), data = df)
# View summary
summary(anova_result)
#
# # Install if needed
# if (!require("emmeans")) install.packages("emmeans")
# library(emmeans)
#
# Fit simplified model for post hoc tests (no Error structure)
model_simple <- aov(Value ~ Time * Group + Gender + Weight, data = df)
# # Estimated marginal means
# em <- emmeans(model_simple, ~ Time * Group)
#
# # Pairwise comparisons
# pairs(em, adjust = "tukey")
# Post hoc comparisons of Time within each Group
emmeans(model_simple, pairwise ~ Time | Group, adjust = "tukey")
# Post hoc comparisons of Group within each Time
emmeans(model_simple, pairwise ~ Group | Time, adjust = "tukey")
# Load necessary libraries
library(tidyverse)
library(readxl)
# Get script directory or fallback
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Construct file path
file_path <- file.path(script_dir, "8-isoprostane.xlsx")
# Read the Excel file (assumes data is in the first sheet)
df <- read_excel(file_path)
# Convert character columns to appropriate formats
df$Time <- as.factor(df$Time)
df$Group <- as.factor(df$Group)
df$Subject <- as.factor(df$Subject)
# # Convert Gender to numeric: 0 = Male, 1 = Female
# df$Gender <- ifelse(df$Gender == "Male", 0,
#                     ifelse(df$Gender == "Female", 1, NA))
# Ensure Weight is numeric
df$Weight <- as.numeric(df$Weight)
# Run two-way ANOVA with covariates
anova_result <- aov(Value ~ Time * Group + Gender + Weight + Error(Subject), data = df)
# View summary
summary(anova_result)
#
# # Install if needed
# if (!require("emmeans")) install.packages("emmeans")
# library(emmeans)
#
# Fit simplified model for post hoc tests (no Error structure)
model_simple <- aov(Value ~ Time * Group + Gender + Weight, data = df)
# # Estimated marginal means
# em <- emmeans(model_simple, ~ Time * Group)
#
# # Pairwise comparisons
# pairs(em, adjust = "tukey")
# # Post hoc comparisons of Time within each Group
# emmeans(model_simple, pairwise ~ Time | Group, adjust = "tukey")
# Post hoc comparisons of Group within each Time
emmeans(model_simple, pairwise ~ Group | Time, adjust = "tukey")
View(df)
# Load libraries
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name
file_path <- "Renal.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Clean column names
names(df) <- gsub("[\r\n\t]+", "", names(df))
names(df) <- trimws(names(df))
# Convert grouping variables to factor
df$`Hemorrhage Level` <- as.factor(df$`Hemorrhage Level`)
df$`Time Point` <- as.factor(df$`Time Point`)
# --- Summary Statistics Function ---
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"Avg" %in% names(df_sub)) {
cat("Avg column not found.\n")
return()
}
summary_stats <- df_sub %>%
group_by(`Hemorrhage Level`) %>%
summarise(
Mean = mean(Avg, na.rm = TRUE),
SD = sd(Avg, na.rm = TRUE),
N = sum(!is.na(Avg))
)
print(summary_stats)
}
# Summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# --- Summary Statistics Function (No Hemorrhage Level Breakdown) ---
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Overall Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"Avg" %in% names(df_sub)) {
cat("Avg column not found.\n")
return()
}
summary_stats <- df_sub %>%
summarise(
Mean = mean(Avg, na.rm = TRUE),
SD = sd(Avg, na.rm = TRUE),
N = sum(!is.na(Avg))
)
print(summary_stats)
}
# Summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# ------------------ Kruskal-Wallis Tests Only ------------------
cat("\n===== TIME POINT = 0 =====\n")
cat("\n--- Kruskal-Wallis: Avg by Hemorrhage Level ---\n")
print(kruskal.test(Avg ~ `Hemorrhage Level`, data = df, subset = (`Time Point` == "0")))
cat("\n===== TIME POINT = 30 =====\n")
cat("\n--- Kruskal-Wallis: Avg by Hemorrhage Level ---\n")
print(kruskal.test(Avg ~ `Hemorrhage Level`, data = df, subset = (`Time Point` == "30")))
# Load libraries
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name
file_path <- "Carotid.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Clean column names
names(df) <- gsub("[\r\n\t]+", "", names(df))
names(df) <- trimws(names(df))
# Convert grouping variables to factor
df$`Hemorrhage Level` <- as.factor(df$`Hemorrhage Level`)
df$`Time Point` <- as.factor(df$`Time Point`)
# --- Summary Statistics Function ---
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"Avg" %in% names(df_sub)) {
cat("Avg column not found.\n")
return()
}
summary_stats <- df_sub %>%
group_by(`Hemorrhage Level`) %>%
summarise(
Mean = mean(Avg, na.rm = TRUE),
SD = sd(Avg, na.rm = TRUE),
N = sum(!is.na(Avg))
)
print(summary_stats)
}
# Summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# --- Summary Statistics Function (No Hemorrhage Level Breakdown) ---
print_summary_stats_overall <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Overall Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"Avg" %in% names(df_sub)) {
cat("Avg column not found.\n")
return()
}
summary_stats <- df_sub %>%
summarise(
Mean = mean(Avg, na.rm = TRUE),
SD = sd(Avg, na.rm = TRUE),
N = sum(!is.na(Avg))
)
print(summary_stats)
}
print_summary_stats_overall("0")
# Load libraries
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name
file_path <- "MAP.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Clean column names
names(df) <- gsub("[\r\n\t]+", "", names(df))
names(df) <- trimws(names(df))
# Convert grouping factors to factor type
df$`Hemorrhage Level` <- as.factor(df$`Hemorrhage Level`)
df$`Time Point` <- as.factor(df$`Time Point`)
# --- Summary Statistics Function ---
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"MAP" %in% names(df_sub)) {
cat("MAP column not found.\n")
return()
}
summary_stats <- df_sub %>%
group_by(`Hemorrhage Level`) %>%
summarise(
Mean = mean(MAP, na.rm = TRUE),
SD = sd(MAP, na.rm = TRUE),
N = sum(!is.na(MAP))
)
print(summary_stats)
}
# Summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# --- Kruskal-Wallis Tests Only ---
run_kw_test <- function(timepoint_val) {
cat("\n===== TIME POINT =", timepoint_val, "=====\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"MAP" %in% names(df_sub)) {
cat("MAP column not found.\n")
return()
}
cat("\n--- Kruskal-Wallis: MAP by Hemorrhage Level ---\n")
print(kruskal.test(MAP ~ `Hemorrhage Level`, data = df_sub))
}
# Run Kruskal-Wallis tests
run_kw_test("0")
run_kw_test("30")
# Load libraries
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name
file_path <- "MAP.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Load libraries
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name
file_path <- "MAP.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Clean column names
names(df) <- gsub("[\r\n\t]+", "", names(df))
names(df) <- trimws(names(df))
# Convert grouping factors to factor type
df$`Hemorrhage Level` <- as.factor(df$`Hemorrhage Level`)
df$`Time Point` <- as.factor(df$`Time Point`)
# --- Summary Statistics Function ---
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"MAP" %in% names(df_sub)) {
cat("MAP column not found.\n")
return()
}
summary_stats <- df_sub %>%
group_by(`Hemorrhage Level`) %>%
summarise(
Mean = mean(MAP, na.rm = TRUE),
SD = sd(MAP, na.rm = TRUE),
N = sum(!is.na(MAP))
)
print(summary_stats)
}
# Summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# --- Summary Statistics Function ---
print_summary_stats <- function(timepoint_vals) {
df_sub <- df %>%
filter(`Time Point` %in% timepoint_vals)
if (!"MAP" %in% names(df_sub)) {
cat("MAP column not found.\n")
return(invisible(NULL))
}
cat("\n=====================================\n")
cat("Summary Statistics by Time Point\n")
summary_stats <- df_sub %>%
group_by(`Time Point`) %>%
summarise(
Mean = mean(MAP, na.rm = TRUE),
SD   = sd(MAP, na.rm = TRUE),
N    = sum(!is.na(MAP)),
.groups = "drop"
)
print(summary_stats)
}
# Summary stats for Time Points 0 and 30
print_summary_stats(c("0", "30"))
# --- Kruskal-Wallis Tests Only ---
run_kw_test <- function(timepoint_val) {
cat("\n===== TIME POINT =", timepoint_val, "=====\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
if (!"MAP" %in% names(df_sub)) {
cat("MAP column not found.\n")
return()
}
cat("\n--- Kruskal-Wallis: MAP by Hemorrhage Level ---\n")
print(kruskal.test(MAP ~ `Hemorrhage Level`, data = df_sub))
}
# Run Kruskal-Wallis tests
run_kw_test("0")
run_kw_test("30")
library(readxl)
library(dplyr)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Define the Excel file name with extension
file_path <- "PV.xlsx"
full_file_path <- file.path(script_dir, file_path)
# Read the Excel file
df <- read_excel(full_file_path)
# Clean column names
names(df) <- gsub("[\r\n\t]+", "", names(df))
names(df) <- trimws(names(df))
# Convert grouping factors to factor type
df$`Hemorrhage Level` <- as.factor(df$`Hemorrhage Level`)
df$`Time Point` <- as.factor(df$`Time Point`)
# Variables of interest
variables <- c("Heart Rate", "Cardiac Output", "ESP", "EDP")
# Function to print summary statistics by Hemorrhage Level and Time Point
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
for (var in variables) {
cat("\n---------------------------------\n")
cat("Variable:", var, "\n")
if (!var %in% names(df_sub)) {
cat("Column not found.\n")
next
}
summary_stats <- df_sub %>%
group_by(`Hemorrhage Level`) %>%
summarise(
Mean = mean(.data[[var]], na.rm = TRUE),
SD = sd(.data[[var]], na.rm = TRUE),
N = sum(!is.na(.data[[var]]))
)
print(summary_stats)
}
}
# Print summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# Function to print overall summary statistics by Time Point (no Hemorrhage Level breakdown)
print_summary_stats <- function(timepoint_val) {
cat("\n=====================================\n")
cat("Overall Summary Statistics for Time Point =", timepoint_val, "\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
for (var in variables) {
cat("\n---------------------------------\n")
cat("Variable:", var, "\n")
if (!var %in% names(df_sub)) {
cat("Column not found.\n")
next
}
summary_stats <- df_sub %>%
summarise(
Mean = mean(.data[[var]], na.rm = TRUE),
SD = sd(.data[[var]], na.rm = TRUE),
N = sum(!is.na(.data[[var]]))
)
print(summary_stats)
}
}
# Print summary stats for Time Point 0 and 30
print_summary_stats("0")
print_summary_stats("30")
# --------------- Kruskal-Wallis Tests ------------------
run_kw_tests <- function(timepoint_val) {
cat("\n===== Time Point =", timepoint_val, "=====\n")
df_sub <- df %>% filter(`Time Point` == timepoint_val)
for (var in variables) {
cat("\n---", var, "---\n")
if (!var %in% names(df_sub)) {
cat("Column not found.\n")
next
}
result <- kruskal.test(df_sub[[var]] ~ df_sub$`Hemorrhage Level`)
print(result)
}
}
# Run Kruskal-Wallis tests for Time Point 0 and 30
run_kw_tests("0")
run_kw_tests("30")

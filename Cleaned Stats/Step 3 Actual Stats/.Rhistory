# --------------------------------------------------------
# NON-PARAMETRIC METHODS â€” Aligned Rank Transform
# Initial failed attempt including covariates (commented)
# art_model <- art(Avg ~ (HemorrhageLevel + OcclusionGroup + Gender + Weightkg +
#                         CumulativeVasopressin + Plasmalyte + Norepi)^3, data = carotid_60)
# Alternative model (commented out because it has too many factors)
# art_model <- art(Avg ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
#                  CumulativeVasopressin + Plasmalyte + Norepi, data = carotid_60)
# anova(art_model)
# Final ART model: HemorrhageLevel * OcclusionGroup only
art_model <- art(Avg ~ HemorrhageLevel * OcclusionGroup, data = carotid_60)
# Create the model for estimated marginal means
art_emm_model <- artlm(art_model, "HemorrhageLevel:OcclusionGroup")
# Estimated marginal means
emm <- emmeans(art_emm_model, ~ HemorrhageLevel * OcclusionGroup)
# Pairwise comparisons with Tukey adjustment
pairs(emm, adjust = "tukey")
# Load necessary libraries
library(ARTool)
library(readxl)
library(dplyr)
library(stringr)
library(broom)
library(openxlsx)
library(rstatix)
library(tidyverse)
library(nlme)
library(ggpubr)
library(broom.mixed)
library(tidyr)
library(car)
library(lme4)
library(lmerTest)
library(emmeans)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Load data
file_path <- "Fractional_Increase_0.xlsx"
full_file_path <- file.path(script_dir, file_path)
df <- read_excel(full_file_path)
# Clean column names
colnames(df) <- colnames(df) %>%
str_replace_all("[ \\-\\(\\)]", "") %>%
make.names(unique = TRUE)
# Variable transformation
df <- df %>%
mutate(
SubjectID = as.factor(ParentFolder),
TimePoint = as.numeric(TimePoint),
OcclusionGroup = factor(OcclusionGroup, levels = c("No Occlusion", "Partial Occlusion", "Full Occlusion")),
OcclusionGroup = as.numeric(OcclusionGroup) - 1,
HemorrhageLevel = as.factor((HemorrhageLevel / 10) - 1)
)
df$OcclusionGroup <- factor(df$OcclusionGroup, levels = 0:2, labels = c("None", "Partial", "Full"))
df$HemorrhageLevel <- factor(df$HemorrhageLevel, levels = 0:2, labels = c("10", "20", "30"))
# Select relevant columns
columns_to_keep <- c("SubjectID", "TimePoint", "HemorrhageLevel", "OcclusionGroup",
"Gender", "Weightkg", "ProbeLocation", "Avg",
"CumulativeVasopressin",	"Plasmalyte",	"Norepi",'UrineOutput'
)
# Define common timepoints
selected_timepoints <- c(0,30,
# 31,
60,
# 61,
65,
# 66,71,
75,
# 76,81,
85,
# 86,
120,
180,
240)
prepare_flow_data <- function(df, location) {
df %>%
filter(ProbeLocation == location, TimePoint %in% selected_timepoints) %>%
select(all_of(columns_to_keep)) %>%
mutate(
TimePoint = as.factor(TimePoint),
HemorrhageLevel = as.factor(HemorrhageLevel),
OcclusionGroup = as.factor(OcclusionGroup),
SubjectID = as.factor(SubjectID),
Plasmalyte = as.numeric(Plasmalyte),
Norepi = as.numeric(Norepi),
CumulativeVasopressin = as.numeric(CumulativeVasopressin)
)
}
# Prepare renal flow data
renal_flow <- prepare_flow_data(df, "Renal Flow")
# Summary stats and plots for renal flow
renal_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
get_summary_stats(Avg, type = "mean_sd") %>%
print(n = 100)
ggboxplot(renal_flow, x = "TimePoint", y = "Avg",
color = "OcclusionGroup", palette = "jco",
facet.by = "HemorrhageLevel")
ggboxplot(renal_flow, x = "TimePoint", y = "Avg",
color = "HemorrhageLevel", palette = "jco",
facet.by = "OcclusionGroup")
renal_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
identify_outliers(Avg) %>%
print(n = 100)
ggqqplot(renal_flow, "Avg", ggtheme = theme_bw()) +
facet_grid(HemorrhageLevel + OcclusionGroup ~ TimePoint, labeller = "label_both")
# Prepare carotid flow data
carotid_flow <- prepare_flow_data(df, "Carotid Flow")
# Summary stats and plots for carotid flow
carotid_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
get_summary_stats(Avg, type = "mean_sd") %>%
print(n = 100)
ggboxplot(carotid_flow, x = "TimePoint", y = "Avg",
color = "OcclusionGroup", palette = "jco",
facet.by = "HemorrhageLevel")
ggboxplot(carotid_flow, x = "TimePoint", y = "Avg",
color = "HemorrhageLevel", palette = "jco",
facet.by = "OcclusionGroup")
carotid_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
identify_outliers(Avg) %>%
print(n = 100)
ggqqplot(carotid_flow, "Avg", ggtheme = theme_bw()) +
facet_grid(HemorrhageLevel + OcclusionGroup ~ TimePoint, labeller = "label_both")
# Code to view outliers in each dataset and then remove anything with greater than 3 st.devs from the group mean
# renal_outliers <- renal_flow %>%
#   group_by(HemorrhageLevel, OcclusionGroup) %>%
#   mutate(
#     group_mean = mean(Avg, na.rm = TRUE),
#     group_sd   = sd(Avg, na.rm = TRUE),
#     z_score    = (Avg - group_mean) / group_sd,
#     is_outlier = abs(z_score) > 3
#   ) %>%
#   filter(is_outlier)
#
# carotid_outliers <- carotid_flow %>%
#   group_by(HemorrhageLevel, OcclusionGroup) %>%
#   mutate(
#     group_mean = mean(Avg, na.rm = TRUE),
#     group_sd   = sd(Avg, na.rm = TRUE),
#     z_score    = (Avg - group_mean) / group_sd,
#     is_outlier = abs(z_score) > 3
#   ) %>%
#   filter(is_outlier)
#
# print(renal_outliers, n = 100)
# print(carotid_outliers, n = 100)
# Function to remove outliers beyond 3 SD from mean per eachgroup
remove_outliers_by_group <- function(data) {
data %>%
group_by(HemorrhageLevel, OcclusionGroup) %>%
mutate(
group_mean = mean(Avg, na.rm = TRUE),
group_sd   = sd(Avg, na.rm = TRUE),
z_score    = (Avg - group_mean) / group_sd,
is_outlier = abs(z_score) > 3
) %>%
ungroup() %>%
filter(!is_outlier) %>%
select(-group_mean, -group_sd, -z_score, -is_outlier)
}
# Clean both datasets
renal_flow <- remove_outliers_by_group(renal_flow)
carotid_flow <- remove_outliers_by_group(carotid_flow)
# # For renal_flow
# renal_flow$Plasmalyte <- as.numeric(renal_flow$Plasmalyte)
# renal_flow$Norepi <- as.numeric(renal_flow$Norepi)
# renal_flow$CumulativeVasopressin <- as.numeric(renal_flow$CumulativeVasopressin)
#
# # For carotid_flow
# carotid_flow$Plasmalyte <- as.numeric(carotid_flow$Plasmalyte)
# carotid_flow$Norepi <- as.numeric(carotid_flow$Norepi)
# carotid_flow$CumulativeVasopressin <- as.numeric(carotid_flow$CumulativeVasopressin)
# Things to add: hemorrhage/balloon difference at each time point vs the fluid/drug
# ============================
# RENAL FLOW ANALYSIS
# ============================
####################################################################################################################################################################################################
####################################################################################################################################################################################################
# 1. Compare Avg across Hemorrhage Groups at TimePoint = 30
# Filter data at TimePoint 30
renal_30 <- renal_flow %>% filter(TimePoint == 30)
# Test the normality of the data before running the test (for sanity)
renal_30 %>%
group_by(HemorrhageLevel) %>%
shapiro_test(Avg)
# Ensure HemorrhageLevel and Gender are factors
renal_30$HemorrhageLevel <- as.factor(renal_30$HemorrhageLevel)
renal_30$Gender <- as.factor(renal_30$Gender)
# Generate the actual ANOVA
anova_30 <- aov(Avg ~ HemorrhageLevel + Gender + Weightkg + CumulativeVasopressin + Plasmalyte + Norepi, data = renal_30)
summary(anova_30)
# Tukey Post-Hoc Analysis
tukey_30 <- TukeyHSD(anova_30)
# Load necessary libraries
library(ARTool)
library(readxl)
library(dplyr)
library(stringr)
library(broom)
library(openxlsx)
library(rstatix)
library(tidyverse)
library(nlme)
library(ggpubr)
library(broom.mixed)
library(tidyr)
library(car)
library(lme4)
library(lmerTest)
library(emmeans)
# Robustly get script directory or fallback to working directory
if ("rstudioapi" %in% rownames(installed.packages())) {
library(rstudioapi)
if (isAvailable()) {
script_dir <- dirname(getActiveDocumentContext()$path)
} else {
script_dir <- getwd()
}
} else {
script_dir <- getwd()
}
# Load data
file_path <- "Fractional_Increase_0.xlsx"
full_file_path <- file.path(script_dir, file_path)
df <- read_excel(full_file_path)
# Clean column names
colnames(df) <- colnames(df) %>%
str_replace_all("[ \\-\\(\\)]", "") %>%
make.names(unique = TRUE)
# Variable transformation
df <- df %>%
mutate(
SubjectID = as.factor(ParentFolder),
TimePoint = as.numeric(TimePoint),
OcclusionGroup = factor(OcclusionGroup, levels = c("No Occlusion", "Partial Occlusion", "Full Occlusion")),
OcclusionGroup = as.numeric(OcclusionGroup) - 1,
HemorrhageLevel = as.factor((HemorrhageLevel / 10) - 1)
)
df$OcclusionGroup <- factor(df$OcclusionGroup, levels = 0:2, labels = c("None", "Partial", "Full"))
df$HemorrhageLevel <- factor(df$HemorrhageLevel, levels = 0:2, labels = c("10", "20", "30"))
# Select relevant columns
columns_to_keep <- c("SubjectID", "TimePoint", "HemorrhageLevel", "OcclusionGroup",
"Gender", "Weightkg", "ProbeLocation", "Avg",
"CumulativeVasopressin",	"Plasmalyte",	"Norepi",'UrineOutput'
)
# Define common timepoints
selected_timepoints <- c(0,30,
# 31,
60,
# 61,
65,
# 66,71,
75,
# 76,81,
85,
# 86,
120,
180,
240)
prepare_flow_data <- function(df, location) {
df %>%
filter(ProbeLocation == location, TimePoint %in% selected_timepoints) %>%
select(all_of(columns_to_keep)) %>%
mutate(
TimePoint = as.factor(TimePoint),
HemorrhageLevel = as.factor(HemorrhageLevel),
OcclusionGroup = as.factor(OcclusionGroup),
SubjectID = as.factor(SubjectID),
Plasmalyte = as.numeric(Plasmalyte),
Norepi = as.numeric(Norepi),
CumulativeVasopressin = as.numeric(CumulativeVasopressin)
)
}
# Prepare renal flow data
renal_flow <- prepare_flow_data(df, "Renal Flow")
# Summary stats and plots for renal flow
renal_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
get_summary_stats(Avg, type = "mean_sd") %>%
print(n = 100)
ggboxplot(renal_flow, x = "TimePoint", y = "Avg",
color = "OcclusionGroup", palette = "jco",
facet.by = "HemorrhageLevel")
ggboxplot(renal_flow, x = "TimePoint", y = "Avg",
color = "HemorrhageLevel", palette = "jco",
facet.by = "OcclusionGroup")
renal_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
identify_outliers(Avg) %>%
print(n = 100)
ggqqplot(renal_flow, "Avg", ggtheme = theme_bw()) +
facet_grid(HemorrhageLevel + OcclusionGroup ~ TimePoint, labeller = "label_both")
# Prepare carotid flow data
carotid_flow <- prepare_flow_data(df, "Carotid Flow")
# Summary stats and plots for carotid flow
carotid_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
get_summary_stats(Avg, type = "mean_sd") %>%
print(n = 100)
ggboxplot(carotid_flow, x = "TimePoint", y = "Avg",
color = "OcclusionGroup", palette = "jco",
facet.by = "HemorrhageLevel")
ggboxplot(carotid_flow, x = "TimePoint", y = "Avg",
color = "HemorrhageLevel", palette = "jco",
facet.by = "OcclusionGroup")
carotid_flow %>%
group_by(TimePoint, HemorrhageLevel, OcclusionGroup) %>%
identify_outliers(Avg) %>%
print(n = 100)
ggqqplot(carotid_flow, "Avg", ggtheme = theme_bw()) +
facet_grid(HemorrhageLevel + OcclusionGroup ~ TimePoint, labeller = "label_both")
# Code to view outliers in each dataset and then remove anything with greater than 3 st.devs from the group mean
# renal_outliers <- renal_flow %>%
#   group_by(HemorrhageLevel, OcclusionGroup) %>%
#   mutate(
#     group_mean = mean(Avg, na.rm = TRUE),
#     group_sd   = sd(Avg, na.rm = TRUE),
#     z_score    = (Avg - group_mean) / group_sd,
#     is_outlier = abs(z_score) > 3
#   ) %>%
#   filter(is_outlier)
#
# carotid_outliers <- carotid_flow %>%
#   group_by(HemorrhageLevel, OcclusionGroup) %>%
#   mutate(
#     group_mean = mean(Avg, na.rm = TRUE),
#     group_sd   = sd(Avg, na.rm = TRUE),
#     z_score    = (Avg - group_mean) / group_sd,
#     is_outlier = abs(z_score) > 3
#   ) %>%
#   filter(is_outlier)
#
# print(renal_outliers, n = 100)
# print(carotid_outliers, n = 100)
# Function to remove outliers beyond 3 SD from mean per eachgroup
remove_outliers_by_group <- function(data) {
data %>%
group_by(HemorrhageLevel, OcclusionGroup) %>%
mutate(
group_mean = mean(Avg, na.rm = TRUE),
group_sd   = sd(Avg, na.rm = TRUE),
z_score    = (Avg - group_mean) / group_sd,
is_outlier = abs(z_score) > 3
) %>%
ungroup() %>%
filter(!is_outlier) %>%
select(-group_mean, -group_sd, -z_score, -is_outlier)
}
# Clean both datasets
renal_flow <- remove_outliers_by_group(renal_flow)
carotid_flow <- remove_outliers_by_group(carotid_flow)
# # For renal_flow
# renal_flow$Plasmalyte <- as.numeric(renal_flow$Plasmalyte)
# renal_flow$Norepi <- as.numeric(renal_flow$Norepi)
# renal_flow$CumulativeVasopressin <- as.numeric(renal_flow$CumulativeVasopressin)
#
# # For carotid_flow
# carotid_flow$Plasmalyte <- as.numeric(carotid_flow$Plasmalyte)
# carotid_flow$Norepi <- as.numeric(carotid_flow$Norepi)
# carotid_flow$CumulativeVasopressin <- as.numeric(carotid_flow$CumulativeVasopressin)
# Things to add: hemorrhage/balloon difference at each time point vs the fluid/drug
# ============================
# RENAL FLOW ANALYSIS
# ============================
####################################################################################################################################################################################################
####################################################################################################################################################################################################
# 1. Compare Avg across Hemorrhage Groups at TimePoint = 30
# Filter data at TimePoint 30
renal_30 <- renal_flow %>% filter(TimePoint == 30)
# Test the normality of the data before running the test (for sanity)
renal_30 %>%
group_by(HemorrhageLevel) %>%
shapiro_test(Avg)
# Ensure HemorrhageLevel and Gender are factors
renal_30$HemorrhageLevel <- as.factor(renal_30$HemorrhageLevel)
renal_30$Gender <- as.factor(renal_30$Gender)
# Generate the actual ANOVA
anova_30 <- aov(Avg ~ HemorrhageLevel + Gender + Weightkg + CumulativeVasopressin + Plasmalyte + Norepi, data = renal_30)
summary(anova_30)
# Tukey Post-Hoc Analysis
tukey_30 <- TukeyHSD(anova_30)
print(tukey_30)
# Normality check for ANOVA residuals at TimePoint 30
shapiro.test(residuals(anova_30))  # Shapiro-Wilk test
# Effect sizes with 95% CI
eta_squared(anova_30)
# Fit the ART model
art_model <- art(Avg ~ HemorrhageLevel, data = renal_30)
# Use artlm() to create the model for EMMs
art_emm_model <- artlm(art_model, "HemorrhageLevel")
# Estimated marginal means
emm <- emmeans(art_emm_model, ~ HemorrhageLevel)
# Pairwise comparisons with Tukey adjustment
pairs(emm, adjust = "tukey")
# Filter data at TimePoint 60
renal_60 <- renal_flow %>% filter(TimePoint == 60)
# Ensure factor conversion
renal_60$HemorrhageLevel <- as.factor(renal_60$HemorrhageLevel)
renal_60$Gender <- as.factor(renal_60$Gender)
# Run ANOVA with interaction and covariates
anova_60 <- aov(Avg ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi, data = renal_60)
summary(anova_60)
# Tukey HSD post-hoc tests
TukeyHSD(anova_60, "OcclusionGroup")
TukeyHSD(anova_60, "HemorrhageLevel")
TukeyHSD(anova_60, "HemorrhageLevel:OcclusionGroup")
# --------------------------------------------------------
# Normality check for ANOVA residuals
shapiro.test(residuals(anova_60))  # Shapiro-Wilk test
# Log transform- p-value = 0.0003662
renal_60 <- renal_60 %>% mutate(Avg_log = log(Avg + 1))  # +1 to avoid log(0)
anova_60_log <- aov(Avg_log ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi, data = renal_60)
shapiro.test(residuals(anova_60_log))
# Square root transform-  p-value = 0.001653, but NaN was produced due to negatives
renal_60 <- renal_60 %>% mutate(Avg_sqrt = sqrt(Avg))
anova_60_sqrt <- aov(Avg_sqrt ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi, data = renal_60)
shapiro.test(residuals(anova_60_sqrt))
# Cube root transform- p-value = 0.001925
renal_60 <- renal_60 %>% mutate(Avg_cbrt = sign(Avg) * abs(Avg)^(1/3))
anova_60_cbrt <- aov(Avg_cbrt ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi, data = renal_60)
shapiro.test(residuals(anova_60_cbrt))
# Reciprocal transform (handle zeros with care)
renal_60 <- renal_60 %>% mutate(Avg_recip = ifelse(Avg == 0, NA, 1 / Avg))
anova_60_recip <- aov(Avg_recip ~ HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi, data = renal_60)
shapiro.test(residuals(anova_60_recip))
# Final ART model: HemorrhageLevel * OcclusionGroup only
art_model <- art(Avg ~ HemorrhageLevel * OcclusionGroup, data = renal_60)
# Create the model for estimated marginal means
art_emm_model <- artlm(art_model, "HemorrhageLevel:OcclusionGroup")
# Estimated marginal means
emm <- emmeans(art_emm_model, ~ HemorrhageLevel * OcclusionGroup)
# Pairwise comparisons with Tukey adjustment
pairs(emm, adjust = "tukey")
# Filter data for TimePoints 60 and 65
renal_60_65 <- renal_flow %>% filter(TimePoint %in% c(60, 65))
# --------------------------------------------------------
# Mixed effects model (LMM) setup
library(lme4)
# Ensure factors
renal_60_65$HemorrhageLevel <- as.factor(renal_60_65$HemorrhageLevel)
renal_60_65$Gender <- as.factor(renal_60_65$Gender)
# Linear mixed effects model
model_60_65 <- lmer(
Avg ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi + (1 | SubjectID),
data = renal_60_65
)
summary(model_60_65)
# Estimated marginal means and Tukey-adjusted pairwise comparisons
emm_60_65 <- emmeans(model_60_65, ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg)
tukey_60_65 <- pairs(emm_60_65, adjust = "tukey")
as.data.frame(tukey_60_65)
# --------------------------------------------------------
# Normality check for LMER residuals
shapiro.test(residuals(model_60_65))  # Shapiro-Wilk test
# Log transform
renal_60_65 <- renal_60_65 %>% mutate(Avg_log = log(Avg + 1))
model_60_65_log <- lmer(
Avg_log ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi + (1 | SubjectID),
data = renal_60_65
)
shapiro.test(residuals(model_60_65_log))
# Square root transform
renal_60_65 <- renal_60_65 %>% mutate(Avg_sqrt = sqrt(Avg))
model_60_65_sqrt <- lmer(
Avg_sqrt ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi + (1 | SubjectID),
data = renal_60_65
)
shapiro.test(residuals(model_60_65_sqrt))
# Cube root transform
renal_60_65 <- renal_60_65 %>% mutate(Avg_cbrt = sign(Avg) * abs(Avg)^(1/3))
model_60_65_cbrt <- lmer(
Avg_cbrt ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi + (1 | SubjectID),
data = renal_60_65
)
shapiro.test(residuals(model_60_65_cbrt))
# Reciprocal transform
renal_60_65 <- renal_60_65 %>% mutate(Avg_recip = ifelse(Avg == 0, NA, 1 / Avg))
model_60_65_recip <- lmer(
Avg_recip ~ TimePoint * HemorrhageLevel * OcclusionGroup + Gender + Weightkg +
CumulativeVasopressin + Plasmalyte + Norepi + (1 | SubjectID),
data = renal_60_65
)
shapiro.test(residuals(model_60_65_recip))
# Fit ART model with 3-way interaction
art_model <- art(Avg ~ TimePoint * HemorrhageLevel * OcclusionGroup, data = renal_60_65)
# Create ART-compatible model for EMMs
art_emm_model <- artlm(art_model, "TimePoint:HemorrhageLevel:OcclusionGroup")
# Compute estimated marginal means
emm <- emmeans(art_emm_model, ~ TimePoint * HemorrhageLevel * OcclusionGroup)
# Pairwise comparisons with Tukey adjustment
pairs(emm, adjust = "tukey")
